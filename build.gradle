plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'


}

group = 'kyoongdev'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'

    //Swagger
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0"

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.2'


    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'


    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'com.mysql:mysql-connector-j'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    testImplementation 'org.hamcrest:hamcrest:2.1'
    testImplementation 'io.rest-assured:rest-assured:5.3.1'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // querydsl
    implementation 'org.hibernate:hibernate-core:6.3.1.Final'

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"


}


tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport' // test가 끝나면 jacocoTestReport 동작
}

jacoco {
    toolVersion = "0.8.11"
    layout.buildDirectory.dir("reports/jacoco")
}

def jacocoExcludePatterns = [
        '**.dto.**',
        '**.event.**',
        '**.*InitData*',
        '**.*Application*',
        '**.exception.**',
        '**.aop.**',
        '**.config.**',
        "**.entity.**",
        "**.common.**",
        "**.Q*"

]

def QDomains = []
for (qPattern in '**.QA'..'**.QZ') {
    QDomains.add(qPattern + '*')
}


jacocoTestReport {
    dependsOn test
    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(true)

    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: jacocoExcludePatterns + QDomains)
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {

    violationRules {
        rule {

            enabled = true
            element = 'CLASS'


            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }


            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            excludes = ['*.*Dto',
                        '*.*InitData*',
                        '*.*Application*',
                        '*.*Exception*',
                        "*.*Config",
                        "*.*Resolver",
                        "*.*QueryDsl",
                        "*.*Repository*",
                        "*.*ErrorCode",
                        "*.enums.*",
                        "*.Q*",
                        "*.common.batch.*",
                        "*.common.apiClient.*",
                        "*.common.*Aspect",
                        "*.common.*.*Handler",
                        "*.common.*.*EntryPoint",
                        "*.common.*.*Filter",
                        "*.common.*.*ErrorCode",
                        "*.modules.user.domain.*",
                        "*.modules.user.services.CustomUserDetailService"
            ]
        }
    }
}


sonar {
    properties {
        property "sonar.projectKey", "kyoongdev_rolling-bites"
        property "sonar.organization", "kyoongdev"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.sources', 'src'
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.test.exclusions', jacocoExcludePatterns.join(',')
        property 'sonar.coverage.exclusions', jacocoExcludePatterns.join(',')
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.java.coveragePlugin', 'jacoco'
    }
}